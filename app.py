# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N09CIzTemOu4mprIp6_J6c2ntZ0akNVj
"""

from google.colab import drive
drive.mount('/content/drive')


# -*- coding: utf-8 -*-


import streamlit as st
import numpy as np
import tensorflow as tf
from PIL import Image

# -------------------------------
# Load trained model
# -------------------------------
@st.cache_resource
def load_model():
    model = tf.keras.models.load_model('/content/drive/MyDrive/ckd_model_vgg.h5', compile=False)
    return model

model = load_model()

# Define class labels
class_labels = [
    "Normal Kidney",
    "Cyst",
    "Tumor",
    "Stone"
]

# -------------------------------
# Sidebar - Project Information
# -------------------------------
st.sidebar.title("📌 Project Info")
st.sidebar.markdown("""
**Project Title:**
🩺 *Machine Learning Model for Early Detection and Risk Classification of Chronic Kidney Disease (CKD)*

**Team Members:**
- Gunjal Chauhan
- [Add Teammates if any]

**Guide/Supervisor:**
👨‍🏫 Dr. [Guide Name]

**Institution:**
🏫 Symbiosis Institute of Technology, Nagpur

**Dataset Used:**
🗂 Public CT Scan Dataset (Normal, Cyst, Tumor, Stone)

**Disclaimer:**
⚠️ This app is a **research prototype**. It is **not a medical diagnostic tool**.
Consult medical professionals for accurate diagnosis.
""")

# -------------------------------
# Main App UI
# -------------------------------
st.title("🩺 Chronic Kidney Disease Detection using Deep Learning")
st.markdown("This application uses a **Convolutional Neural Network (CNN)** model trained on CT scan images to classify kidney conditions into one of four categories: **Normal, Cyst, Tumor, Stone**.")

# File uploader
uploaded_file = st.file_uploader("📤 Upload a CT scan image", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    # Open and display image
    image = Image.open(uploaded_file).convert('RGB')
    st.image(image, caption='📷 Uploaded CT Scan', use_column_width=True)

    # Preprocess image
    img = image.resize((224, 224))  # Adjust size as per model
    img_array = np.expand_dims(np.array(img) / 255.0, axis=0)

    # Prediction
    prediction = model.predict(img_array)
    predicted_class_id = np.argmax(prediction)
    confidence = np.max(prediction)

    # Decode class
    predicted_label = class_labels[predicted_class_id]

    # Display results
    st.subheader("🔎 Model Prediction")
    st.success(f"✅ **Predicted Class:** {predicted_label}")
    st.info(f"📊 **Confidence Level:** {confidence * 100:.2f}%")

    # Add insights
    if predicted_label == "Normal Kidney":
        st.write("🟢 The scan looks **Normal**. No visible kidney abnormalities detected.")
    elif predicted_label == "Cyst":
        st.write("🟡 The scan indicates a possible **Kidney Cyst**. Further clinical validation required.")
    elif predicted_label == "Tumor":
        st.write("🔴 The scan suggests a **Kidney Tumor**. Immediate medical consultation recommended.")
    elif predicted_label == "Stone":
        st.write("🟠 The scan suggests presence of a **Kidney Stone**. Further medical check-up advised.")

    # Research disclaimer
    st.warning("⚠️ **Disclaimer:** This output is generated by a machine learning model and is intended **only for academic/research purposes**.")

# -------------------------------
# Footer
# -------------------------------
st.markdown("---")
st.markdown("✅ *Developed as part of M.Tech Final Year Project - Symbiosis Institute of Technology, Nagpur*")
